module org.example.domainmodel.GenerateDomainmodel

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import com.github.darvasd.xtextdocs.xtext.fragment.DocsGeneratorFragment
import com.github.darvasd.xtextdocs.xtext.formatter.MarkdownFormatter

var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.example.domainmodel"
				rootPath = rootPath
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "org.example.domainmodel.Domainmodel"
			fileExtensions = "domain"

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			
			// xtext-docs-gen
			fragment = DocsGeneratorFragment auto-inject {
				outputFileName = "docs.md"
				formatter = com.github.darvasd.xtextdocs.xtext.formatter.MarkdownDocsFormatter {
					includeDotReferenceGraph = true
					includeSimplifiedGrammar = true
					mainTitle = "Domain model grammar documentation"
					titleLevelOffset = "1" // top level title will be prefixed with ##
				}
			}
		}
	}
}
